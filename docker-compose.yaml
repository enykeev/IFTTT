version: '2.4'

services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./contrib/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.external-url=http://localhost:1234/prometheus/'
      - '--web.route-prefix=/'
    restart: unless-stopped
    networks:
      - http
    labels:
      - ifttt.address=http://localhost/prometheus
      - ifttt.targetport=9090
  db:
    image: postgres:9.6
    environment:
      POSTGRES_USER: ifttt
      POSTGRES_PASSWORD: mypassword
    networks:
      - db
    ports:
      - 5432:5432
  mq:
    image: rabbitmq:3.8
    networks:
      - mq
    ports:
      - 5672:5672
  http:
    image: lucaslorentz/caddy-docker-proxy:alpine
    command: -log stdout
    environment:
      CADDY_DOCKER_LABEL_PREFIX: ifttt
    ports:
      - 2015:2015
      - 1234:80
    networks:
      - http
    volumes:
      - type: bind
        source: .
        target: /app
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
  sink:
    image: nginx
    networks:
      - http
    volumes:
      - ./contrib/nginx.conf:/etc/nginx/nginx.conf

  migration:
    build: .
    image: enykeev/ifttt:latest
    command: npm run migrate
    environment:
      NODE_ENV: staging
      WAIT_DB: 1
      PG_CONNECTION_STRING: postgres://ifttt:mypassword@db/ifttt
    depends_on:
      - db
    networks:
      - db

  api:
    build: .
    image: enykeev/ifttt:latest
    command: node src/components/api.js
    environment:
      NODE_ENV: staging
      # LOG_LEVEL: debug
      WAIT_MQ: 1
      WAIT_DB: 1
      PG_CONNECTION_STRING: postgres://ifttt:mypassword@db/ifttt
      AMQP_CONNECTION_STRING: amqp://mq
    restart: unless-stopped
    scale: 2
    depends_on:
      - db
      - mq
    networks:
      - http
      - db
      - mq
    labels:
      - ifttt_1=http://localhost/
      - ifttt_1.root=/app/dist
      - ifttt_2.address=http://localhost/api
      - ifttt_2.targetport=3000

  ws:
    build: .
    image: enykeev/ifttt:latest
    command: node src/components/ws.js
    environment:
      NODE_ENV: staging
      # LOG_LEVEL: debug
      WAIT_MQ: 1
      AMQP_CONNECTION_STRING: amqp://mq
    restart: unless-stopped
    depends_on:
      - mq
    networks:
      - http
      - mq
    labels:
      - ifttt.address=http://localhost/ws
      - ifttt.targetport=3002
      - ifttt.proxy.websocket=

  sensor:
    build: .
    image: enykeev/ifttt:latest
    command: node src/components/sensor.js
    environment:
      NODE_ENV: staging
      # LOG_LEVEL: debug
      WAIT_API: 1
      RPC_CONNECTION_STRING: ws://api:3000
    restart: unless-stopped
    networks:
      - http
    labels:
      - ifttt.address=http://localhost/sensor
      - ifttt.targetport=3001

  actionrunner:
    build: .
    image: enykeev/ifttt:latest
    command: node src/components/actionrunner.js
    environment:
      NODE_ENV: staging
      # LOG_LEVEL: debug
      WAIT_API: 1
      RPC_CONNECTION_STRING: ws://api:3000
    restart: unless-stopped
    scale: 2
    networks:
      - http

  ruleengine:
    build: .
    image: enykeev/ifttt:latest
    command: node src/components/ruleengine.js
    environment:
      NODE_ENV: staging
      # LOG_LEVEL: debug
      WAIT_API: 1
      RPC_CONNECTION_STRING: ws://api:3000
    restart: unless-stopped
    scale: 2
    networks:
      - http

networks:
  db:
  mq:
  http:
